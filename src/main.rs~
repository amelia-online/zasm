use regex::Regex;
use std::io::{Read, Write};

struct Instruction {
    opcode: u8,
    r1: u8,
    r2: u8,
    imm: u16,
}

enum Param {
    Immediate(u16),
    Register(u8),
    Deref(Box<Param>)
}

impl Instruction {
    pub fn new() -> Self {
	Self {
	    opcode: 0,
	    r1: 0,
	    r2: 0,
	    imm: 0,
	}
    }

    pub fn from(opcode: u8, r1: u8, r2: u8, imm: u16) -> Self {
	Self {
	    opcode: opcode,
	    r1: r1,
	    r2: r2,
	    imm: imm,
	}
    }
}

fn parse(syntax: String, pat: &Regex) -> Option<Instruction> {
    None
}

fn parse_instr(syntax: String) {

}

fn parse_param(syntax: String) {

}

fn parse_reg(syntax: String) -> Option<u8>{
    match syntax.trim() {
	"@ret" => Some(0x1),
	"@spr" => Some(0x2),
	"@glb" => Some(0x3),
	"@rta" => Some(0x4),
	"@fla" => Some(0x5),
	"@fpr" => Some(0x6),
	"@rg0" => Some(0x7),
	"@rg1" => Some(0x8),
	"@rg2" => Some(0x9),
	"@rg3" => Some(0xA),
	"@rg4" => Some(0xB),
	"@pr0" => Some(0xC),
	"@pr1" => Some(0xD),
	"@pr2" => Some(0xE),
	"@rg5" => Some(0xF),
	_ => None,
    }
}

fn file_to_string(path: String) -> Result<String, ()> {
    if let Ok(mut file) = std::fs::File::open(path) {
	let mut buf = String::new();
	file.read_to_string(&mut buf).unwrap();
	Ok(buf)
    } else {
	Err(())
    }
}

fn main() {
    let instr_pattern = Regex::new(r"^(?<i>\w+) (?<p1>[ -~]+), (?<p2>[ -~]+)$").unwrap();
    
}

#[test]
fn test_parse_reg() {
    let byte = parse_reg("@rg1".to_string());
    assert_eq!(byte, Some(0x8));
}
